package de.fhws.biedermann.webshop.utils;

import de.fhws.biedermann.webshop.database.DataAccessShopDatabase;
import de.fhws.biedermann.webshop.models.UserVulnerability;
import de.fhws.biedermann.webshop.utils.logic.AdminLogic;

public class VulnerabilityCheck {

    public static UserVulnerability checkSqlInjection(String sql){
        UserVulnerability user = null;
        DataAccessShopDatabase dasd = new DataAccessShopDatabase();
        if(sql == null){
            return null;
        }
        else if(sql.toLowerCase( ).contains("drop")){
            return new UserVulnerability();
        }
        sql= sql.toLowerCase();
        switch ( AdminLogic.getInstance( ).getLevel() )
        {
            case 1 -> user = checkForSqlInjectionLvl1( sql, dasd );
            case 2 -> {
                sql = changeInputForSqlInjectionLevel2( sql );
                user = checkForSqlInjectionLvl2( sql, dasd );
            }
            case 3 -> {
                sql = changeInputForSqlInjectionLevel2( sql );
                user = checkForSqlInjectionLvl3( sql, dasd );
            }
        }
        return user;
    }

    private static UserVulnerability checkForSqlInjectionLvl3( String sql, DataAccessShopDatabase dasd )
    {
        UserVulnerability user = null;

        if( sql.contains("' or 1=1;#") || sql.contains("'or1=1;#") || sql.contains("' or1=1;#") || sql.contains("'or 1=1;#")||
                sql.contains("' and 1=1;#") || sql.contains("'and1=1;#") || sql.contains("' and1=1;#") || sql.contains("'and 1=1;#")){
            sql =changeInputForSqlInjectionLevel3( sql );
            if( sql.contains("' or 1=1;#") || sql.contains("'or1=1;#") || sql.contains("' or1=1;#") || sql.contains("'or 1=1;#")||
                    sql.contains("' and 1=1;#") || sql.contains("'and1=1;#") || sql.contains("' and1=1;#") || sql.contains("'and 1=1;#")){
                user = dasd.getUserInformationVulnerability(3);
                String password = dasd.getPassword(3);
                user.setPassword(password);
            }
        }
        if( sql.equals("' union select email, password from user;#") || sql.equals("'union select email, password from user;#")
                || sql.equals("'union select password, email from user;#") || sql.equals("' union select password, email from user;#")){
            user = dasd.getUserInformationVulnerability(3);
            String password = dasd.getPassword(3);
            user.setPassword(password);
        }
        return user;
    }

    private static UserVulnerability checkForSqlInjectionLvl1( String sql,
        DataAccessShopDatabase dasd )
    {
        return checkForSqlInjectionWithGivenUserId( sql, dasd, 1 );
    }

    private static UserVulnerability checkForSqlInjectionLvl2( String sql,
        DataAccessShopDatabase dasd )
    {
        return checkForSqlInjectionWithGivenUserId( sql, dasd, 2 );
    }

    private static UserVulnerability checkForSqlInjectionWithGivenUserId( final String sql, final DataAccessShopDatabase dasd, final int userId )
    {
        if( sql.contains("' or 1=1;#") || sql.contains("'or1=1;#") || sql.contains("' or1=1;#") || sql.contains("'or 1=1;#")||
            sql.contains("' and 1=1;#") || sql.contains("'and1=1;#") || sql.contains("' and1=1;#") || sql.contains("'and 1=1;#")){
            UserVulnerability user = dasd.getUserInformationVulnerability( userId );
            String password = dasd.getPassword( userId );
            user.setDescription(password);
            return user;
        }
        return null;
    }

    public static boolean checkBlindSqlInjection(String sql){
        if(sql == null){
            return false;
        }
        sql = sql.toLowerCase();

        if(sql.contains("sleep(") || sql.contains("benchmark(") || sql.contains("sleep (") || sql.contains("benchmark (")){
            try {
                Thread.sleep(15000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            return true;
        }
        else if(sql.contains("; wait for delay") || sql.contains(";wait for delay") || sql.contains("; wait for time") || sql.contains(";wait for time")){
            try {
                Thread.sleep(15000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            return true;
        }
        return false;
    }

    private static String changeInputForSqlInjectionLevel2( String sql ){

        while( sql.charAt( 0 ) != '\'' || sql.charAt( sql.length()-1 ) != '#' ){
            if( sql.charAt( 0 ) == '\'' ) sql = sql.substring(1 );
            if( sql.charAt( sql.length()-1 ) == '#' ) sql = sql.substring( 0, sql.length()-1 );
        }
        return sql;
    }

    private static String changeInputForSqlInjectionLevel3(String sql){
        return sql.replace( "1=1","" );
    }

    public static boolean checkXSS(String input){
        input = input.toLowerCase();
        if(input.equals("")){
            return false;
        }
        switch( AdminLogic.getInstance().getLevel()){
            case 1:
                if(input.contains("<script>") && input.contains("</script>")){
                    return true;
                }
                break;
            case 2:
                input= changeInputForXssLevel2(input);
                if(input.contains("<script>") && input.contains("</script>")){
                    return true;
                }
                break;
            case 3:
                if(input.contains("<script>") && input.contains("</script>")){
                    input = changeInputForXssLevel2(input);
                    input =  changeInputForXssLevel3(input);
                    if(input.contains("<script>") && input.contains("</script>")){
                        return true;
                    }
                }
                else if(input.contains("<img src=") && input.contains("/>")){
                    return true;
                }
                break;
        }
        return false;
    }

    private static String changeInputForXssLevel2(String input){
        return input.replace("script","");
    }

    private static String changeInputForXssLevel3(String input){
        return input.replaceFirst("<","")
                    .replaceFirst(">","")
                    .replaceFirst("/","");
    }
}
